[
  {
    "method_id": 1,
    "method_data": [
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT \nMIN(mc.note) AS production_note,\nMIN(t.title) AS movie_title,\nMIN(t.production_year) AS movie_year\nFROM \ncompany_type AS ct,\ninfo_type AS it,\nmovie_companies AS mc,\nmovie_info_idx AS mi_idx,\ntitle AS t\nWHERE ct.kind = 'production companies'\nAND it.info = 'top 250 rank'\nAND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\nAND (mc.note LIKE '%(co-production)%' OR mc.note LIKE '%(presents)%')\nAND ct.id = mc.company_type_id\nAND t.id = mc.movie_id\nAND t.id = mi_idx.movie_id\nAND mc.movie_id = mi_idx.movie_id\nAND it.id = mi_idx.info_type_id;",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET enable_seqscan = OFF;"],
            "query_script": "SELECT \nMIN(mc.note) AS production_note,\nMIN(t.title) AS movie_title,\nMIN(t.production_year) AS movie_year\nFROM \ncompany_type AS ct,\ninfo_type AS it,\nmovie_companies AS mc,\nmovie_info_idx AS mi_idx,\ntitle AS t\nWHERE ct.kind = 'production companies'\nAND it.info = 'top 250 rank'\nAND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\nAND (mc.note LIKE '%(co-production)%' OR mc.note LIKE '%(presents)%')\nAND ct.id = mc.company_type_id\nAND t.id = mc.movie_id\nAND t.id = mi_idx.movie_id\nAND mc.movie_id = mi_idx.movie_id\nAND it.id = mi_idx.info_type_id;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM flight\nJOIN aircraft ON aircraft_code = code\nJOIN airport ON departure_airport = airport_code\nJOIN booking_leg USING (flight_id)\nJOIN booking USING (booking_id)\nWHERE range BETWEEN 3000 AND 7000 \nAND airport.continent = 'AS'\nAND booking.price < 300\nAND status = 'Delayed';",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET enable_seqscan = OFF;"],
            "query_script": "SELECT * FROM flight\nJOIN aircraft ON aircraft_code = code\nJOIN airport ON departure_airport = airport_code\nJOIN booking_leg USING (flight_id)\nJOIN booking USING (booking_id)\nWHERE range BETWEEN 3000 AND 7000 \nAND airport.continent = 'AS'\nAND booking.price < 300\nAND status = 'Delayed';",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 2,
    "method_data": [
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT \nMIN(mc.note) AS production_note,\nMIN(t.title) AS movie_title,\nMIN(t.production_year) AS movie_year\nFROM \ncompany_type AS ct,\ninfo_type AS it,\nmovie_companies AS mc,\nmovie_info_idx AS mi_idx,\ntitle AS t\nWHERE ct.kind = 'production companies'\nAND it.info = 'top 250 rank'\nAND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\nAND (mc.note LIKE '%(co-production)%' OR mc.note LIKE '%(presents)%')\nAND ct.id = mc.company_type_id\nAND t.id = mc.movie_id\nAND t.id = mi_idx.movie_id\nAND mc.movie_id = mi_idx.movie_id\nAND it.id = mi_idx.info_type_id;",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET enable_hashjoin = OFF;"],
            "query_script": "SELECT \nMIN(mc.note) AS production_note,\nMIN(t.title) AS movie_title,\nMIN(t.production_year) AS movie_year\nFROM \ncompany_type AS ct,\ninfo_type AS it,\nmovie_companies AS mc,\nmovie_info_idx AS mi_idx,\ntitle AS t\nWHERE ct.kind = 'production companies'\nAND it.info = 'top 250 rank'\nAND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\nAND (mc.note LIKE '%(co-production)%' OR mc.note LIKE '%(presents)%')\nAND ct.id = mc.company_type_id\nAND t.id = mc.movie_id\nAND t.id = mi_idx.movie_id\nAND mc.movie_id = mi_idx.movie_id\nAND it.id = mi_idx.info_type_id;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM flight\nJOIN aircraft ON aircraft_code = code\nJOIN airport ON departure_airport = airport_code\nJOIN booking_leg USING (flight_id)\nJOIN booking USING (booking_id)\nJOIN passenger USING (booking_id)\nJOIN account ON passenger.account_id = account.account_id\nWHERE price BETWEEN 500 AND 1000\nAND continent = 'EU'\nAND LOWER(account.first_name) LIKE 'john%';",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET enable_hashjoin = OFF;"],
            "query_script": "SELECT * FROM flight\nJOIN aircraft ON aircraft_code = code\nJOIN airport ON departure_airport = airport_code\nJOIN booking_leg USING (flight_id)\nJOIN booking USING (booking_id)\nJOIN passenger USING (booking_id)\nJOIN account ON passenger.account_id = account.account_id\nWHERE price BETWEEN 500 AND 1000\nAND continent = 'EU'\nAND LOWER(account.first_name) LIKE 'john%';",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 3,
    "method_data": [
      {
        "database_name": "imdb_stokholm",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT COUNT (DISTINCT title_id) FROM titles\nWHERE type IN ('movie', 'video');",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT COUNT (title_id) FROM titles\nWHERE type IN ('movie', 'video');",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT COUNT (DISTINCT phone_id) FROM phone \nWHERE phone_type IN ('home', 'work');",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT COUNT (phone_id) FROM phone \nWHERE phone_type IN ('home', 'work');",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 4,
    "method_data": [
      {
        "database_name": "imdb_stokholm",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT type , COUNT(*)\nFROM titles\nGROUP BY (type)\nORDER BY (type) ASC;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT type , COUNT(title_id)\nFROM titles\nGROUP BY (type)\nORDER BY (type) ASC;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT level, COUNT(*) FROM frequent_flyer\nGROUP BY level\nORDER BY level ASC;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT level, COUNT(frequent_flyer_id) FROM frequent_flyer\nGROUP BY level\nORDER BY level ASC;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 5,
    "method_data": [
      {
        "database_name": "imdb_stokholm",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT DISTINCT name\nFROM (\nSELECT primary_title, original_title, crew.title_id, person_id, category\nFROM crew\nINNER JOIN titles ON titles.title_id = crew.title_id\nWHERE primary_title LIKE 'Spider-Man %'\nOR original_title LIKE 'Spider-Man %'\n) AS a\nINNER JOIN people ON a.person_id = people.person_id\nWHERE a.category = 'actor'\nOR a.category = 'actress';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": ["DROP MATERIALIZED VIEW IF EXISTS q3;"],
            "query_script": [
              "CREATE MATERIALIZED VIEW q3\nAS\nSELECT primary_title, original_title, crew.title_id, person_id, category\nFROM crew\nINNER JOIN titles ON titles.title_id = crew.title_id\nWHERE primary_title LIKE 'Spider-Man %'\nOR original_title LIKE 'Spider-Man %';",
              "SELECT DISTINCT name FROM people\nINNER JOIN q3 ON q3.person_id = people.person_id\nWHERE q3.category = 'actor'\nOR q3.category = 'actress';"
            ],
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT DISTINCT ff.first_name, ff.last_name, booking_with_account.price\nFROM (\nSELECT b.booking_id, b.account_id, b.price, a.frequent_flyer_id\nFROM booking b\nINNER JOIN account a ON b.account_id = a.account_id\nWHERE b.price > 300\n) AS booking_with_account\nINNER JOIN frequent_flyer ff ON booking_with_account.frequent_flyer_id = ff.frequent_flyer_id\nWHERE ff.first_name LIKE 'J%';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": ["DROP MATERIALIZED VIEW IF EXISTS booking_with_account_mv;"],
            "query_script": [
              "CREATE MATERIALIZED VIEW booking_with_account_mv\nAS \nSELECT b.booking_id, b.account_id, b.price, a.frequent_flyer_id\nFROM booking b\nINNER JOIN account a ON b.account_id = a.account_id\nWHERE b.price > 300;",
              "SELECT DISTINCT ff.first_name, ff.last_name, booking_with_account_mv.price\nFROM booking_with_account_mv\nINNER JOIN frequent_flyer ff ON booking_with_account_mv.frequent_flyer_id = ff.frequent_flyer_id\nWHERE ff.first_name LIKE 'J%';"
            ],
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 6,
    "method_data": [
      {
        "database_name": "imdb_stokholm",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT primary_title , premiered\nFROM titles\nWHERE type LIKE 'movie'\nAND premiered BETWEEN 2000 AND 2010\nORDER BY premiered ASC;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT primary_title , premiered\nFROM titles\nWHERE type = 'movie'\nAND premiered BETWEEN 2000 AND 2010\nORDER BY premiered ASC;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT phone, phone_type, primary_phone FROM phone\nWHERE phone_type LIKE 'mobile'\nAND LENGTH(phone) = 10\nORDER BY phone;\n",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT phone, phone_type, primary_phone FROM phone\nWHERE phone_type = 'mobile'\nAND LENGTH(phone) = 10\nORDER BY phone;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 7,
    "method_data": [
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT  MIN(n.name) AS member_in_charnamed_movie, MIN(n.name) AS a1\nFROM cast_info AS ci,\ncompany_name AS cn,\nkeyword AS k,\nmovie_companies AS mc,\nmovie_keyword AS mk,\nname AS n,\ntitle AS t\nWHERE k.keyword ='character-name-in-title'\nAND n.name LIKE 'X%'\nAND n.id = ci.person_id\nAND ci.movie_id = t.id\nAND t.id = mk.movie_id\nAND mk.keyword_id = k.id\nAND t.id = mc.movie_id\nAND mc.company_id = cn.id\nAND ci.movie_id = mc.movie_id\nAND ci.movie_id = mk.movie_id\nAND mc.movie_id = mk.movie_id;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": [
              "CREATE TEMP TABLE temp1 AS\nSELECT mk.movie_id\nFROM keyword AS k,\nmovie_keyword AS mk\nWHERE mk.keyword_id = k.id\nAND k.keyword ='character-name-in-title';",
              "SELECT MIN(n.name) AS member_in_charnamed_movie, MIN(n.name) AS a1\nFROM cast_info AS ci,\ncompany_name AS cn,\nmovie_companies AS mc,\nname AS n,\ntitle AS t,\ntemp1\nWHERE n.name LIKE 'X%'\nAND n.id = ci.person_id\nAND ci.movie_id = t.id\nAND t.id = temp1.movie_id\nAND t.id = mc.movie_id\nAND mc.company_id = cn.id\nAND ci.movie_id = mc.movie_id\nAND ci.movie_id = temp1.movie_id\nAND mc.movie_id = temp1.movie_id;"
            ],
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT passenger_id FROM\nbooking bk\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN account a USING (account_id)\nJOIN frequent_flyer USING (frequent_flyer_id)\nJOIN passenger ps ON ps.booking_id=bk.booking_id\nWHERE level = 4\nAND leg_num = 3\nAND is_returning IS true\nAND departure_airport = 'ABV'\nAND scheduled_departure BETWEEN '2020-07-01' AND '2020-07-08'\nORDER BY 1;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": [
              "CREATE TEMP TABLE temp_leg_flights AS\nSELECT \nbooking_id,\nleg_num,\nis_returning,\nbooking_leg.flight_id AS bl_flight_id,\nflight.flight_id AS flight_flight_id,\ndeparture_airport,\nscheduled_departure,\narrival_airport\nFROM booking_leg\nJOIN flight USING (flight_id)\nWHERE leg_num = 3\nAND is_returning IS true\nAND departure_airport = 'ABV'\nAND scheduled_departure BETWEEN '2020-07-01' AND '2020-07-08';",
              "SELECT ps.passenger_id\nFROM booking\nJOIN temp_leg_flights USING (booking_id)\nJOIN account USING (account_id)\nJOIN frequent_flyer USING (frequent_flyer_id)\nJOIN passenger ps ON ps.booking_id = booking.booking_id\nWHERE level = 4\nORDER BY 1;"
            ],
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 8,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS account_last_name",
              "DROP INDEX IF EXISTS account_last_name_lower",
              "CREATE INDEX IF NOT EXISTS account_last_name ON account (last_name);"
            ],
            "query_script": "SELECT * FROM account WHERE lower(last_name)='daniels';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM account \nWHERE last_name='daniels'\nOR last_name='Daniels'\nOR last_name ='DANIELS';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS account_last_name_lower ON account (lower(last_name));"
            ],
            "query_script": "SELECT * FROM account WHERE lower(last_name)='daniels';",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS title_title",
              "DROP INDEX IF EXISTS title_title_lower",
              "CREATE INDEX IF NOT EXISTS title_title ON title (title);"
            ],
            "query_script": "SELECT * FROM title WHERE lower(title)='pilot';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM title \nWHERE title='Pilot'\nOR title='PILOT'\nOR title ='pilot';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS title_title_lower ON title (lower(title));"
            ],
            "query_script": "SELECT * FROM title WHERE lower(title)='pilot';",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 9,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS flight_scheduled_departure ON flight(scheduled_departure);"
            ],
            "query_script": "SELECT * FROM flight\nWHERE scheduled_departure ::date BETWEEN '2020-08-17' AND '2020-08-18'",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM flight\nWHERE scheduled_departure BETWEEN '2020-08-17' AND '2020-08-19';",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS aka_title_production_year ON aka_title(production_year);"
            ],
            "query_script": "SELECT * FROM aka_title WHERE production_year::text = '2011';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM aka_title WHERE production_year = 2011;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 10,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS flight_actual_departure ON flight (actual_departure);",
              "CREATE INDEX IF NOT EXISTS flight_scheduled_departure ON flight (scheduled_departure);"
            ],
            "query_script": "SELECT * FROM flight\nWHERE COALESCE(actual_departure, scheduled_departure) BETWEEN '2020-08-17' AND '2020-08-18'",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM flight\nWHERE (actual_departure BETWEEN '2020-08-17' AND '2020-08-18')\nOR (\nactual_departure IS NULL\nAND scheduled_departure BETWEEN '2020-08-17' AND '2020-08-18'\n);",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS company_name_name_pcode_nf ON company_name(name_pcode_nf);",
              "CREATE INDEX IF NOT EXISTS company_name_name_pcode_sf ON company_name(name_pcode_sf);"
            ],
            "query_script": "SELECT * FROM company_name \nWHERE COALESCE(name_pcode_nf, name_pcode_sf) = 'A253';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM company_name \nWHERE (name_pcode_nf = 'A253') \nOR (\nname_pcode_nf IS NULL\nAND name_pcode_sf = 'A253'\n);",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 11,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF  EXISTS account_last_name_lower_pattern"
            ],
            "query_script": "SELECT * FROM account WHERE LOWER(last_name) LIKE 'johns%';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM account WHERE (LOWER(last_name) >='johns' AND LOWER(last_name) < 'johnt');",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS account_last_name_lower_pattern ON account (LOWER(last_name) text_pattern_ops);"
            ],
            "query_script": "SELECT * FROM account WHERE LOWER(last_name) LIKE 'johns%';",
            "cleanup_scripts": [
              "DROP INDEX IF  EXISTS account_last_name_lower_pattern"
            ]
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS title_title_lower_pattern"
            ],
            "query_script": "SELECT * FROM title WHERE LOWER(title) LIKE 'the best%'",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM title WHERE (LOWER(title) >='the best' AND LOWER(title) < 'the besu');",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS title_title_lower_pattern ON title (LOWER(title) text_pattern_ops);"
            ],
            "query_script": "SELECT * FROM title WHERE LOWER(title) LIKE 'the best%';",
            "cleanup_scripts": [
              "DROP INDEX IF EXISTS title_title_lower_pattern"
            ]
          }
        ]
      }
    ]
  },
  {
    "method_id": 12,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT bp.update_ts Boarding_pass_issued,\n scheduled_departure,\n actual_departure,\n status\nFROM flight f\nJOIN booking_leg bl USING (flight_id)\nJOIN boarding_pass bp USING (booking_leg_id)\nWHERE bp.update_ts > scheduled_departure + interval '30 minutes'\nAND f.update_ts >= scheduled_departure - interval '1 hour';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS boarding_pass_update_ts ON boarding_pass (update_ts);"
            ],
            "query_script": "SELECT bp.update_ts Boarding_pass_issued,\n scheduled_departure,\n actual_departure,\n status\nFROM flight f\nJOIN booking_leg bl USING (flight_id)\nJOIN boarding_pass bp USING (booking_leg_id)\nWHERE bp.update_ts > scheduled_departure + interval '30 minutes'\nAND f.update_ts >= scheduled_departure - interval '1 hour'\nAND bp.update_ts >= '2020-08-16' \nAND bp.update_ts < '2020-08-20';",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT *\nFROM title\nJOIN movie_companies ON title.id = movie_companies.movie_id\nJOIN company_name ON company_name.id = movie_companies.company_id\nWHERE company_name.country_code = '[us]';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE INDEX IF NOT EXISTS title_production_year ON title(production_year);"
            ],
            "query_script": "SELECT *\nFROM title\nJOIN movie_companies ON title.id = movie_companies.movie_id\nJOIN company_name ON company_name.id = movie_companies.company_id\nWHERE company_name.country_code = '[us]'\nAND title.production_year = 2010;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 13,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS flight_canceled;"

            ],
            "query_script": "SELECT * FROM flight \nWHERE scheduled_departure BETWEEN '2020-08-15' AND '2024-08-18'\nAND status='Canceled';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": ["CREATE INDEX IF NOT EXISTS flight_canceled ON flight(flight_id) WHERE status='Canceled';"],
            "query_script": "SELECT * FROM flight \nWHERE scheduled_departure BETWEEN '2020-08-15' AND '2024-08-18'\nAND status='Canceled';",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS company_name_en;"
            ],
            "query_script": "SELECT * FROM company_name WHERE country_code = '[en]';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": ["CREATE INDEX IF NOT EXISTS company_name_en ON company_name(id) WHERE country_code = '[en]';"],
            "query_script": "SELECT * FROM company_name WHERE country_code = '[en]';",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 14,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT flight_id FROM flight \nWHERE flight_id NOT IN (SELECT flight_id FROM booking_leg);",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT flight_id FROM flight f\nEXCEPT\nSELECT flight_id FROM booking_leg;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              ""
            ],
            "query_script": "SELECT id FROM title\nWHERE id NOT IN (SELECT movie_id FROM aka_title);",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT id FROM title\nEXCEPT\nSELECT movie_id FROM aka_title;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 15,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT flight_id FROM flight\nWHERE flight_id IN (SELECT flight_id FROM booking_leg);",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT flight_id FROM flight f\nINTERSECT\nSELECT flight_id FROM booking_leg;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              ""
            ],
            "query_script": "SELECT id FROM title\nWHERE id IN (SELECT movie_id FROM aka_title);",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT id FROM title\nINTERSECT\nSELECT movie_id FROM aka_title;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 16,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT\nCASE\nWHEN actual_departure>scheduled_departure + interval '1 hour' THEN 'Late\ngroup 1'\nELSE 'Late group 2'\nEND AS grouping,\nflight_id,\nCOUNT(*) AS num_passengers\nFROM boarding_pass bp\nJOIN booking_leg bl USING (booking_leg_id)\nJOIN booking b USING (booking_id)\nJOIN flight f USING (flight_id)\nWHERE departure_airport='FRA'\nAND actual_departure>'2020-07-01' AND ( (\nactual_departure>scheduled_departure + interval '30 minute'\nAND actual_departure<=scheduled_departure + interval '1 hour'\n)\nOR\n(actual_departure>scheduled_departure + interval '1 hour'\nAND bp.update_ts >scheduled_departure + interval '30 minute')\n)\nGROUP BY 1,2;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT\n'Late group 1' AS grouping,\nflight_id,\ncount(*) AS num_passengers\nFROM boarding_pass bp\nJOIN booking_leg bl USING (booking_leg_id)\nJOIN booking b USING (booking_id)\nJOIN flight f USING (flight_id)\nWHERE departure_airport='FRA' AND\nactual_departure>scheduled_departure + interval '1 hour' AND\nbp.update_ts > scheduled_departure + interval '30 minutes'\nAND actual_departure>'2020-07-01'\nGROUP BY 1,2\nUNION ALL\nSELECT\n'Late group 2' AS grouping,\nflight_id,\nCOUNT(*) AS num_passengers\nFROM boarding_pass bp\nJOIN booking_leg bl USING(booking_leg_id)\nJOIN booking b USING (booking_id)\nJOIN flight f USING (flight_id)\nWHERE departure_airport='FRA' AND\nactual_departure>scheduled_departure + interval '30 minute'\nAND actual_departure<=scheduled_departure + interval '1 hour'\nAND actual_departure>'2020-07-01'\nGROUP BY 1,2;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              ""
            ],
            "query_script": "SELECT \nCASE WHEN c.country_code = '[es]' THEN 'Old TV movies made by Spanish companies'\nELSE 'Modern TV movies made by Italian companies' END AS description, t.title, t.production_year\nFROM title t\nJOIN movie_companies mc ON t.id = mc.movie_id\nJOIN company_name c ON mc.company_id = c.id\nWHERE mc.note LIKE '%TV%'\nAND (\n(c.country_code = '[es]' AND t.production_year < 2000)\nOR \n(c.country_code = '[it]' AND t.production_year > 2010)\n);",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT \n'Old TV movies made by Spanish companies' AS description,\nt.title,\nt.production_year\nFROM title t\nJOIN movie_companies mc ON t.id = mc.movie_id\nJOIN company_name c ON mc.company_id = c.id\nWHERE mc.note LIKE '%TV%'\nAND c.country_code = '[es]' \nAND t.production_year < 2000\nUNION ALL\nSELECT \n'Modern TV movies made by Italian companies' AS description, t.title, t.production_year\nFROM title t\nJOIN movie_companies mc ON t.id = mc.movie_id\nJOIN company_name c ON mc.company_id = c.id\nWHERE mc.note LIKE '%TV%'\nAND c.country_code = '[it]' \nAND t.production_year > 2010;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 17,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": [
              "CREATE TEMP TABLE flights_totals AS\nSELECT\nbl.flight_id,\ndeparture_airport,\n(AVG(price))::numeric (7,2) AS avg_price,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nGROUP BY 1,2;",
              "SELECT flight_id,\navg_price,\nnum_passengers\nFROM flights_totals\nWHERE flight_id=222183;"
            ],
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM\n(SELECT \nbl.flight_id,\ndeparture_airport,\n(AVG(price))::numeric (7,2) AS avg_price,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nGROUP BY 1,2) a\nWHERE flight_id=222183;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              ""
            ],
            "query_script": [
              "CREATE TEMP TABLE ratings AS \nSELECT t.title AS movie_title, MAX(mi_idx.info) AS max_rating, t.id AS title_id\nFROM info_type it\nJOIN movie_info_idx mi_idx ON it.id = mi_idx.info_type_id\nJOIN title t ON t.id = mi_idx.movie_id\nWHERE it.info = 'rating'\nGROUP BY movie_title, t.id;",
              "SELECT * FROM ratings WHERE title_id = 1088622;"
            ],
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM (\nSELECT t.title AS movie_title, MAX(mi_idx.info) AS max_rating, t.id AS title_id\nFROM info_type it\nJOIN movie_info_idx mi_idx ON it.id = mi_idx.info_type_id\nJOIN title t ON t.id = mi_idx.movie_id\nWHERE it.info = 'rating'\nGROUP BY movie_title, t.id\n) ratings\nWHERE title_id = 1088622;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 18,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP VIEW IF EXISTS flight_stats;",
              "CREATE VIEW flight_stats AS\nSELECT bl.flight_id,\ndeparture_airport,\n(AVG(price))::numeric (7,2) AS avg_price,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nGROUP BY 1,2;"
            ],
            "query_script": "SELECT * FROM flight_stats fs\nJOIN (SELECT flight_id FROM flight f\nWHERE actual_departure BETWEEN '2020-08-01' AND '2020-08-16') fl\nON fl.flight_id=fs.flight_id;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT \nbl.flight_id,\ndeparture_airport,\n(AVG(price))::numeric (7,2) AS avg_price,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nWHERE actual_departure BETWEEN '2020-08-01' AND '2020-08-16'\nGROUP BY 1,2;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP VIEW IF EXISTS us_title_stats;",
              "CREATE VIEW us_title_stats AS \nSELECT title.production_year AS prod_year, \ntitle.id AS title_id, \nCOUNT(DISTINCT title.id) AS amount_of_titles\nFROM title\nJOIN movie_companies ON title.id = movie_companies.movie_id\nJOIN company_name ON company_name.id = movie_companies.company_id\nWHERE company_name.country_code = '[us]'\nGROUP BY 1, 2;"
            ],
            "query_script": "SELECT * FROM us_title_stats\nJOIN (SELECT id FROM title WHERE production_year BETWEEN 2005 AND 2010) t\nON t.id = us_title_stats.title_id;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT title.production_year AS prod_year, title.id AS title_id, COUNT(DISTINCT title.id) AS amount_of_titles\nFROM title\nJOIN movie_companies ON title.id = movie_companies.movie_id\nJOIN company_name ON company_name.id = movie_companies.company_id\nWHERE company_name.country_code = '[us]'\nAND title.production_year BETWEEN 2005 AND 2010\nGROUP BY 1, 2;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 19,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP VIEW IF EXISTS flight_departure;",
              "CREATE VIEW flight_departure AS\nSELECT bl.flight_id,\ndeparture_airport,\nCOALESCE(actual_departure, scheduled_departure)::date AS departure_date,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nGROUP BY 1,2,3;"
            ],
            "query_script": "SELECT flight_id\nFROM flight_departure\nWHERE departure_airport='ORD';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT flight_id FROM flight\nWHERE departure_airport='ORD'\nAND flight_id IN (SELECT flight_id FROM booking_leg);",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP VIEW IF EXISTS movie_company_infos;",
              "CREATE VIEW movie_company_infos AS \nSELECT t.id as title_id, t.title, t.production_year, mi.info\nFROM title AS t\nJOIN movie_info AS mi ON t.id = mi.movie_id\nJOIN movie_companies AS mc ON t.id = mc.movie_id\nJOIN company_type AS ct ON mc.company_type_id = ct.id;"
            ],
            "query_script": "SELECT title_id, info FROM movie_company_infos\nWHERE production_year = 2000\nGROUP BY 1,2\nORDER BY title_id;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT t.id, mi.info\nFROM title AS t\nJOIN movie_info AS mi ON t.id = mi.movie_id\nWHERE production_year = 2000\nGROUP BY 1,2\nORDER BY t.id;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 20,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT bl.flight_id,\ndeparture_airport,\nCOALESCE(actual_departure,\nscheduled_departure)::date departure_date,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nWHERE (actual_departure BETWEEN '2020-08-01' AND '2020-08-02')\nOR (actual_departure IS NULL AND scheduled_departure\nBETWEEN '2020-08-02' AND '2020-08-02')\nGROUP BY 1,2,3;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "DROP MATERIALIZED VIEW IF EXISTS flight_departure_prev_day;",
              "CREATE MATERIALIZED VIEW flight_departure_prev_day AS\nSELECT bl.flight_id,\ndeparture_airport,\nCOALESCE(actual_departure,\nscheduled_departure)::date departure_date,\nCOUNT(DISTINCT passenger_id) AS num_passengers\nFROM booking b\nJOIN booking_leg bl USING (booking_id)\nJOIN flight f USING (flight_id)\nJOIN passenger p USING (booking_id)\nWHERE (actual_departure BETWEEN '2020-08-01' AND '2020-08-02')\nOR (actual_departure IS NULL AND scheduled_departure\nBETWEEN '2020-08-02' AND '2020-08-02')\nGROUP BY 1,2,3;"
            ],
            "query_script": "SELECT * FROM flight_departure_prev_day;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT t.title AS movie_title, MAX(mi_idx.info) AS max_rating, t.id AS title_id, t.production_year\nFROM info_type it\nJOIN movie_info_idx mi_idx ON it.id = mi_idx.info_type_id\nJOIN title t ON t.id = mi_idx.movie_id\nWHERE it.info = 'rating'\nAND t.production_year = 2012\nGROUP BY movie_title, t.id;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "DROP MATERIALIZED VIEW IF EXISTS max_title_rating_2012;",
              "CREATE MATERIALIZED VIEW max_title_rating_2012 AS\nSELECT t.title AS movie_title, MAX(mi_idx.info) AS max_rating, t.id AS title_id, t.production_year\nFROM info_type it\nJOIN movie_info_idx mi_idx ON it.id = mi_idx.info_type_id\nJOIN title t ON t.id = mi_idx.movie_id\nWHERE it.info = 'rating'\nAND t.production_year = 2012\nGROUP BY movie_title, t.id;"
            ],
            "query_script": "SELECT * FROM max_title_rating_2012;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 21,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": ["CREATE OR REPLACE FUNCTION num_passengers(p_flight_id int) RETURNS integer\nAS\n$$BEGIN\nRETURN (\nSELECT COUNT(*) FROM booking_leg bl\nJOIN booking b USING (booking_id)\nJOIN passenger p USING (booking_id)\nWHERE flight_id=p_flight_id);\nEND;\n$$ LANGUAGE plpgsql;"],
            "query_script": "SELECT flight_id, num_passengers(flight_id) AS num_pass\nFROM flight f\nWHERE departure_airport='ORD'\nAND scheduled_departure BETWEEN '2020-07-05' AND '2020-07-13';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT f.flight_id, COUNT(*) AS num_pass\nFROM booking_leg bl\nJOIN booking b USING (booking_id)\nJOIN passenger p USING (booking_id)\nJOIN flight f USING (flight_id)\nWHERE departure_airport='ORD'\nAND scheduled_departure BETWEEN '2020-07-05' AND '2020-07-13'\nGROUP BY 1;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_stokholm",
        "baseline_and_variations": [
          {
            "setup_scripts": ["CREATE OR REPLACE FUNCTION num_people_by_job(p_title_id varchar, p_job varchar) RETURNS integer \nAS\n$$BEGIN\nRETURN (\nSELECT COUNT(DISTINCT p.person_id)\nFROM public.crew c\nJOIN public.people p ON c.person_id = p.person_id\nWHERE c.title_id = p_title_id\nAND c.job = p_job;\n);\nEND;\n$$ LANGUAGE plpgsql;"],
            "query_script": "SELECT \nt.title_id,\nt.primary_title,\nnum_people_by_job(t.title_id, 'actor') AS num_actors\nFROM public.titles t\nWHERE type = 'tvSpecial'\nGROUP BY t.title_id\nORDER BY num_actors DESC;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT \nt.title_id,\nt.primary_title,\nCOUNT(DISTINCT p.person_id) AS num_people\nFROM public.titles t\nJOIN public.crew c ON t.title_id = c.title_id\nJOIN public.people p ON c.person_id = p.person_id\nWHERE t.type = 'tvSpecial'\nAND c.category = 'actor'\nGROUP BY t.title_id\nORDER BY num_actors DESC;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 22,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": ["CREATE OR REPLACE FUNCTION age_category (p_age int)\nRETURNS TEXT language plpgsql AS\n$body$\nBEGIN\nRETURN (CASE\nWHEN p_age <= 2 THEN 'Infant'\nWHEN p_age <= 12 THEN 'Child'\nWHEN p_age < 65 THEN 'Adult'\nELSE 'Senior' END);\nEND; $body$;"],
            "query_script": "SELECT passenger_id, age_category(age)\nFROM passenger\nLIMIT 5000000;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT passenger_id,\nCASE\nWHEN age <= 2 THEN 'Infant'\nWHEN age <= 12 THEN 'Child'\nWHEN age < 65 THEN 'Adult'\nELSE 'Senior'\nEND FROM passenger LIMIT 5000000;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": ["CREATE OR REPLACE FUNCTION company_from (p_country_code text)\nRETURNS TEXT language plpgsql AS\n$body$\nBEGIN\nRETURN (CASE\nWHEN p_country_code = '[null]' THEN 'Unknown'\nWHEN p_country_code = '[en]' THEN 'USA'\nWHEN p_country_code = '[gb]' THEN 'Great Britain'\nWHEN p_country_code = '[de]' THEN 'Germany'\nWHEN p_country_code = '[sp]' THEN 'Spain'\nWHEN p_country_code = '[it]' THEN 'Italy'\nWHEN p_country_code = '[fr]' THEN 'France'\nWHEN p_country_code = '[ca]' THEN 'Canada'\nWHEN p_country_code = '[jp]' THEN 'Japan'\nELSE 'Other' END);\nEND; $body$;"],
            "query_script": "SELECT id, name, company_from(country_code)\nFROM company_name;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT id, name, \nCASE\nWHEN country_code = '[null]' THEN 'Unknown'\nWHEN country_code = '[en]' THEN 'USA'\nWHEN country_code = '[gb]' THEN 'Great Britain'\nWHEN country_code = '[de]' THEN 'Germany'\nWHEN country_code = '[sp]' THEN 'Spain'\nWHEN country_code = '[it]' THEN 'Italy'\nWHEN country_code = '[fr]' THEN 'France'\nWHEN country_code = '[ca]' THEN 'Canada'\nWHEN country_code = '[jp]' THEN 'Japan'\nELSE 'Other' END \nFROM company_name;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 23,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 24,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT\ncity,\ndate_trunc('month', scheduled_departure),\nSUM(passengers) passengers\nFROM airport a\nJOIN flight f ON airport_code = departure_airport\nJOIN (\nSELECT flight_id, COUNT(*) passengers\nFROM booking_leg l\nJOIN boarding_pass b USING (booking_leg_id)\nWHERE boarding_time > '2020-07-15' AND boarding_time < '2020-07-31'\nGROUP BY flight_id\n) cnt\nUSING (flight_id)\nGROUP BY 1,2\nORDER BY 3 DESC;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE TABLE IF NOT EXISTS boarding_pass_part (\nboarding_pass_id SERIAL,\npassenger_id BIGINT,\nbooking_leg_id BIGINT,\nseat TEXT,\nboarding_time TIMESTAMPTZ,\nprecheck BOOLEAN,\nupdate_ts TIMESTAMPTZ\n)\nPARTITION BY RANGE (boarding_time);",
              "CREATE TABLE IF NOT EXISTS boarding_pass_may\nPARTITION OF boarding_pass_part\nFOR VALUES\nFROM ('2020-05-01'::timestamptz)\nTO ('2020-06-01'::timestamptz);",
              "CREATE TABLE IF NOT EXISTS boarding_pass_june\nPARTITION OF boarding_pass_part\nFOR VALUES\nFROM ('2020-06-01'::timestamptz)\nTO ('2020-07-01'::timestamptz);",
              "CREATE TABLE IF NOT EXISTS boarding_pass_july\nPARTITION OF boarding_pass_part\nFOR VALUES\nFROM ('2020-07-01'::timestamptz)\nTO ('2020-08-01'::timestamptz);",
              "CREATE TABLE IF NOT EXISTS boarding_pass_aug\nPARTITION OF boarding_pass_part\nFOR VALUES\nFROM ('2020-08-01'::timestamptz)\nTO ('2020-09-01'::timestamptz);",
              "DO $$\nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM boarding_pass_part LIMIT 1) THEN\n        INSERT INTO boarding_pass_part SELECT * from boarding_pass;\n    END IF;\nEND$$;"
            ],
            "query_script": "SELECT\ncity,\ndate_trunc('month', scheduled_departure),\nSUM(passengers) passengers\nFROM airport a\nJOIN flight f ON airport_code = departure_airport\nJOIN (\nSELECT flight_id, COUNT(*) passengers\nFROM booking_leg l\nJOIN boarding_pass_part b USING (booking_leg_id)\nWHERE boarding_time > '2020-07-15' AND boarding_time < '2020-07-31'\nGROUP BY flight_id\n) cnt\nUSING (flight_id)\nGROUP BY 1,2\nORDER BY 3 DESC;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_stokholm",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT\nregion,\npremiered,\nCOUNT(*) AS people_count\nFROM titles t\nJOIN crew c ON t.title_id = c.title_id\nJOIN akas ON akas.title_id = t.title_id\nWHERE category IN ('actor', 'actress', 'director')\nGROUP BY region, premiered\nORDER BY people_count DESC;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "CREATE TABLE IF NOT EXISTS crew_part\n(\n    title_id character varying,\n    person_id character varying,\n    category character varying,\n    job character varying\n)\nPARTITION BY LIST (category);",
              "CREATE TABLE IF NOT EXISTS crew_part_director\nPARTITION OF crew_part\nFOR VALUES IN ('director');",
              "CREATE TABLE IF NOT EXISTS crew_part_actor\nPARTITION OF crew_part\nFOR VALUES IN ('actor');",
              "CREATE TABLE IF NOT EXISTS crew_part_actress\nPARTITION OF crew_part\nFOR VALUES IN ('actress');",
              "CREATE TABLE IF NOT EXISTS crew_part_producer\nPARTITION OF crew_part\nFOR VALUES IN ('producer');",
              "CREATE TABLE IF NOT EXISTS crew_part_self\nPARTITION OF crew_part\nFOR VALUES IN ('self');",
              "CREATE TABLE IF NOT EXISTS crew_part_editor\nPARTITION OF crew_part\nFOR VALUES IN ('editor');",
              "CREATE TABLE IF NOT EXISTS crew_part_other\nPARTITION OF crew_part\nDEFAULT;",
              "DO $$\nBEGIN\n    IF NOT EXISTS (SELECT 1 FROM crew_part LIMIT 1) THEN\n        INSERT INTO crew_part SELECT * FROM crew;\n    END IF;\nEND$$;"
            ],
            "query_script": "SELECT\nregion,\npremiered,\nCOUNT(*) AS people_count\nFROM titles t\nJOIN crew_part c ON t.title_id = c.title_id\nJOIN akas ON akas.title_id = t.title_id\nWHERE category IN ('actor', 'actress', 'director')\nGROUP BY region, premiered\nORDER BY people_count DESC;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 25,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM account ORDER BY first_name, last_name;",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET work_mem TO '1 GB';"],
            "query_script": "SELECT * FROM account ORDER BY first_name, last_name;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM company_name ORDER BY name, country_code;",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET work_mem TO '1 GB';"],
            "query_script": "SELECT * FROM company_name ORDER BY name, country_code;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 26,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT COUNT(*) FROM passenger;",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET max_parallel_workers_per_gather TO 10;"],
            "query_script": "SELECT COUNT(*) FROM passenger;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT COUNT(*) FROM name;",
            "cleanup_scripts": []
          },
          {
            "setup_same_session": true,
            "setup_scripts": ["SET max_parallel_workers_per_gather TO 10;"],
            "query_script": "SELECT COUNT(*) FROM name;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 27,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM flight \nWHERE departure_airport = 'ATL' \nAND status = 'Delayed'\nORDER BY flight_id\nLIMIT 50\nOFFSET 1000;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM flight \nWHERE departure_airport = 'ATL' \nAND status = 'Delayed'\nAND flight_id > 160384\nORDER BY flight_id\nLIMIT 50;",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM title\nWHERE season_nr = 1\nAND production_year BETWEEN 2002 AND 2008\nORDER BY id \nLIMIT 100\nOFFSET 5000;",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [],
            "query_script": "SELECT * FROM title\nWHERE season_nr = 1\nAND production_year BETWEEN 2002 AND 2008\nAND id > 54352\nORDER BY id \nLIMIT 100;",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  },
  {
    "method_id": 28,
    "method_data": [
      {
        "database_name": "postgres_air",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS flight_status_actual_departure;",
              "CREATE INDEX IF NOT EXISTS flight_status ON flight (status);",
              "CREATE INDEX IF NOT EXISTS flight_actual_departure ON flight(actual_departure);"
            ],
            "query_script": "SELECT * FROM flight \nWHERE status = 'Delayed'\nAND actual_departure BETWEEN '2020-05-10' AND '2020-10-15';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS flight_status;",
              "DROP INDEX IF EXISTS flight_actual_departure;",
              "CREATE INDEX IF NOT EXISTS flight_status_actual_departure on flight (status, actual_departure);"
            ],
            "query_script": "SELECT * FROM flight \nWHERE status = 'Delayed'\nAND actual_departure BETWEEN '2020-05-10' AND '2020-10-15';",
            "cleanup_scripts": []
          }
        ]
      },
      {
        "database_name": "imdb_old",
        "baseline_and_variations": [
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS aka_title_production_year_note_text_pattern;",
              "CREATE INDEX IF NOT EXISTS aka_title_production_year ON aka_title(production_year);",
              "CREATE INDEX IF NOT EXISTS aka_title_note_text_pattern ON aka_title(note text_pattern_ops);"
            ],
            "query_script": "SELECT * FROM aka_title\nWHERE production_year BETWEEN 1980 AND 2000\nAND note LIKE '(Argentina%';",
            "cleanup_scripts": []
          },
          {
            "setup_scripts": [
              "DROP INDEX IF EXISTS aka_title_production_year;",
              "DROP INDEX IF EXISTS aka_title_note_text_pattern;",
              "CREATE INDEX IF NOT EXISTS aka_title_production_year_note_text_pattern on aka_title(production_year, note text_pattern_ops);"
            ],
            "query_script": "SELECT * FROM aka_title\nWHERE production_year BETWEEN 1980 AND 2000\nAND note LIKE '(Argentina%';",
            "cleanup_scripts": []
          }
        ]
      }
    ]
  }
]